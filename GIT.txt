* Git es un sistema de control de versiones distribuido gratuito y de código abierto diseñado para manejar todo, desde proyectos pequeños hasta proyectos muy grandes con velocidad y eficiencia.

* Nos permite llevar un historial de todos los cambios que suceden en un proyecto.




COMANDOS TERMINAL

* ls. Lista de todos los directorios que tenemos en la carpeta donde estamos.
* cd. Comando para ir a otro directorio.
* cd .. Para regresar al directorio anterior.
* pwd. En que lugar me encuentro.
* mkdir. Para crear un directorio (carpeta).
* COPY ON archivo.extensión . Crea un archivo de cualquier extensión y posteriormente podemos rellenar el documento, paramos dando control + z.




CONFIGURACIONES DE GIT

* git config --global user.name "Luis0510-Avalos". El nombre de usuario para todos los proyectos.
* git config --global user.email "luisavalos.0311@gmail.com". El correo.




GIT INIT

* Inicializamos el repositorio, con esto el proyecto ya empieza a trabajar con git.




RAMAS

* git branch -m "main". Para cambiar el nombre de la rama principal, puede ser main, trunk o development.
* Podemos decir que la rama main, cada vez que se realice un commit va creciendo.




GIT ADD Y GIT COMMIT

* git add " ". Nos permite que los archivos sean guardados, seguidos por git.
* git add . Añade todos los archivos que están en la carpeta.
* git commit -m " ". Nos permite comentar las acciones que hemos realizado y guardar nuestro trabajo.




GIT LOG Y GIT STATUS

* git log. Nos permite ver el historial de las acciones que se han realizado al proyecto, commits, autor, fecha, etc...
* git log --graph. Nos muestra el historial casi como una rama ascendente.
* git log --graph --pretty=oneline. Muestra solo los commits.
* git log --graph --decorate --all --online. Para que no muestre los id de los commits tan largos, sino sea más especifico.





GIT CHECKOUT Y GIT RESET

* git status. Para ver que está pasando con nuestros archivos.
* git checkout. Este comando te permite volver a una versión anterior de un commit o momento en el tiempo del historial de las versiones de tu programa.
* git reset. Permite deshacer los commit de un repositorio.




GIT "ALIAS"

* git config --global alias.tree "log --graph --decorate --all --oneline". Sirve para guardar comando que usamos mucho en git, y si es demasiado extenso, podemos guardarlo en un "alias" para no escribirlo todo. (En lo personal, puede ser cuando declaramos una variable con un valor).




FICHERO .GITIGNORE











